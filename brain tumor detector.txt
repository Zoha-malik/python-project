import os

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import cv2

from PIL import Image
from sklearn.model_selection import train_test_split
normal_cells=os.listdir('/content/drive/MyDrive/no')

print(normal_cells[0:5])
print(normal_cells[-5:])
tumor_cells=os.listdir('/content/drive/MyDrive/yes')

print(tumor_cells[0:5])
print(tumor_cells[-5:])

import os
import random
from PIL import Image
import matplotlib.pyplot as plt

tumor_path = '/content/drive/MyDrive/brain_tumor_dataset/yes'
tumor_cells = os.listdir(tumor_path)

# Select a random subset of tumor cell images
random_images = random.sample(tumor_cells, 5)
tumor_image_paths = [os.path.join(tumor_path, img_file) for img_file in random_images]

# Display the randomly selected tumor cell images
for i, image_path in enumerate(tumor_image_paths):
    image = Image.open(image_path)
    plt.subplot(1, 5, i+1)
    plt.imshow(image)
    plt.axis('off')
plt.show()

print('Length of the Normal Brain Cells: ',len(normal_cells))
print('Length of the Cancurus Brain Cells: ',len(tumor_cells))
normal_label=[0]*98
tumor_label=[1]*155
print('Normal Cell labels: ',len(normal_label))
print('Tumor Cell labels: ',len(tumor_label))
print('With Normal labels: ',normal_label[0:5])
print('With Tumor labels: ',tumor_label[0:5])
labels=normal_label+tumor_label

print('Total labels are: ',len(labels))

print(labels[0:5])
print(labels[-5:])
type(labels)

nor_img=mpimg.imread('/content/drive/MyDrive/no/10 no.jpg')

plt.imshow(nor_img)
nor_img=mpimg.imread('/content/drive/MyDrive/yes/Y10.jpg')

plt.imshow(nor_img)

import seaborn as sn


sn.countplot(x=labels)
import os

normal_path = '/content/drive/MyDrive/no'
data = []

for img_file in normal_cells:
    image = Image.open(os.path.join(normal_path, img_file))  # Corrected path concatenation
    image = image.resize((128, 128))
    image = image.convert('RGB')
    image = np.array(image)
    data.append(image)

tumor_path = '/content/drive/MyDrive/yes'

for img_file in tumor_cells:
    image = Image.open(os.path.join(tumor_path, img_file))  # Corrected path concatenation
    image = image.resize((128, 128))
    image = image.convert('RGB')
    image = np.array(image)
    data.append(image)
type(data)
len(data)
data[0]
ype(data[0])
#Checking the shape of the single image
data[0].shape
X=np.array(data)
Y=np.array(labels)
type(X)
type(y)
print(X.shape)
print(Y.shape)
X_train,X_test,Y_train,Y_test=train_test_split(X,Y, test_size=0.2, random_state=101)
print(X.shape,X_train.shape,X_test.shape)
X_train=X_train/255
X_test=X_test/255
X_train[0]
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D,MaxPooling2D, Dense,Flatten, Dropout
num_of_classes=2

model=Sequential()

model.add(Conv2D(64, kernel_size=(3,3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())

model.add(Dense(128, activation='relu'))

model.add(Dense(num_of_classes, activation='sigmoid'))
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
history=model.fit(X_train,Y_train, epochs=50, validation_split=0.1, verbose=1)
model.evaluate(X_test,Y_test)
plt.plot(history.history['accuracy'], label='train')
plt.plot(history.history['val_accuracy'], label='validation')

plt.legend()
plt.show()
plt.plot(history.history['loss'], label='train')
plt.plot(history.history['val_loss'], label='validation')

plt.legend()
plt.show()

input_image_path=input('Enter the path of the image: ')

input_image=cv2.imread(input_image_path)

plt.imshow(input_image)
plt.show()


# Ensure the shape matches the expected input shape of your model
input_image_reshape=cv2.resize(input_image,(128,128))


# Normalize the pixel values
image_normalized=input_image_reshape/255


# Reshape for model prediction
img_reshape=np.reshape(image_normalized,(1,128,128,3))


# Make Predictions
input_prediction=model.predict(img_reshape)

# Display the prediction Probabilities
print('Prediction Probabilities are:  ',input_prediction)


# Get the Predicted Label
input_pred_label=np.argmax(input_prediction)


if input_pred_label ==1:
    print('Tumor Cell')
else:
    print('Normal Cell')

input_image_path=input('Enter the path of the image: ')

input_image=cv2.imread(input_image_path)

plt.imshow(input_image)
plt.show()


# Ensure the shape matches the expected input shape of your model
input_image_reshape=cv2.resize(input_image,(128,128))


# Normalize the pixel values
image_normalized=input_image_reshape/255


# Reshape for model prediction
img_reshape=np.reshape(image_normalized,(1,128,128,3))


# Make Predictions
input_prediction=model.predict(img_reshape)

# Display the prediction Probabilities
print('Prediction Probabilities are:  ',input_prediction)


# Get the Predicted Label
input_pred_label=np.argmax(input_prediction)


if input_pred_label ==1:
    print('Tumor Cell')
else:
    print('Normal Cell')